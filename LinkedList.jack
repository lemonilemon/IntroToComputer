class LinkedList {
    field int sz;
    field Element front;
    field Element back;
    constructor LinkedList new() {
        let sz = 0;
        let front = null;   
        let back = null;
        return this;
    }
    method Element getFront() {
        return front;
    }
    method void push(Dog dog) {
        if(sz = 0) {
            let front = Element.new(dog);
            let back = front;
        }
        else {
            do back.setNext(Element.new(dog));
            let back = back.getNext();
        }
        let sz = sz + 1;
        return;
    }
    method Dog getElement(int k) {
        var Element cur;
        /** Make sure that the code is safe */ 
        if(k > sz | k = sz) {
            return null;
        }
        let cur = front;
        while(k > 0) {
            let k = k - 1;
            let cur = cur.getNext();
        }
        return cur.getData();
    }
    method void pop(int k) {
        var Element cur;
        var Element last;
        if(k > sz | k = sz) {
            return;
        }
        let cur = front;
        let last = null;
        if(k = 0) {
            let front = front.getNext();
        }
        else {
            while(k > 0) {
                let last = cur;
                let k = k - 1;
                let cur = cur.getNext();
            }
        }
        if(cur.getNext() = null) {
            let back = last;
        }
        do cur.dispose();
        let sz = sz - 1;
        return;
    }
    method void dispose() {
        var Element cur;
        var Element nxt;
        let cur = front;
        while(~(cur = null)) {
            let nxt = cur.getNext();
            do cur.dispose();
            let cur = nxt;
        }
        do Memory.deAlloc(this);
        return;
    }
}
