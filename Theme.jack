class Theme {
    field int x, y;
    field int curPos;
    field Castle DogCastle, BadDogCastle;
    field LinkedList Dogs, BadDogs; 
    field GameUI ui;
    field Money money;
    field boolean st1, st2, st3;
    field int counter1, counter2, counter3;

    constructor Theme new() {
        let Dogs = LinkedList.new(); // Number of dogs
        let BadDogs = LinkedList.new();
        let DogCastle = Castle.new(true); 
        let BadDogCastle = Castle.new(false);
        let ui = GameUI.new();
        let money = Money.new();
        let st1 = false;
        let st2 = false;
        let st3 = false;
        let counter1 = 0;
        let counter2 = 0;
        let counter3 = 0;
        return this;
    }

    method int getTargetDog() {
        var int targetDogIdx;
        var int idx;
        var int leftwall;
        var Dog cur;
        var Element it; // iterator
        let leftwall = 60; // dogcastle 
        let it = Dogs.getFront(); 
        let idx = 0;
        while(~(it = null)) {
            let cur = it.getData();
            if(cur.Location() + 48 > leftwall) {
                let leftwall = cur.Location() + 48;
                let targetDogIdx = idx;
            }
            let idx = idx + 1;
            let it = it.getNext(); 
        } 
        /** Set wall */
        do Dog.Change_leftWall(leftwall);
        return targetDogIdx;
    }

    method int getTargetBadDog() {
        var Display display;
        var int targetBadDogIdx;
        var int idx;
        var int rightwall;
        var Dog cur;
        var Element it;
        let rightwall = 340; // baddogcastle
        let it = BadDogs.getFront(); 
        let idx = 0;
        while(~(it = null)) {
            let cur = it.getData();
            if(cur.Location() < rightwall) {
                let rightwall = cur.Location();
                let targetBadDogIdx = idx;
            }
            let idx = idx + 1;
            let it = it.getNext(); 
        }
        /** Set wall */
        do Dog.Change_rightWall(rightwall);
        return targetBadDogIdx;
    }

    method void run() {     
        var Element it;
        var Dog cur;
        var Dog targetDog, targetBadDog;
        var int targetDogIdx, targetBadDogIdx;
        var int damage;
        var int opt;
        var Display display;

        let opt = -1;
        do Dog.Change_y(150);
        do Castle.Change_y(20);

        do Sys.wait(50);
        while(true) {
            do Sys.wait(50);
            if(BadDogs.size() < 5) {
                let counter1 = counter1 + 1;
                let counter2 = counter2 + 1;
                let counter3 = counter3 + 1;
                if((~st1) & (counter1 = 50)) {
                    let st1 = true;
                    do BadDogs.push(Dog.new(0, false));
                    let counter1 = 0;
                }
                if(st1 & (counter1 = 200)) {
                    let counter1 = 0;
                    do BadDogs.push(Dog.new(0, false));
                }
                if((~st2) & (counter2 = 1000)) {
                    let st2 = true;
                    do BadDogs.push(Dog.new(0, false));
                    let counter2 = 0;
                }
                if(st2 & (counter2 = 120)) {
                    let counter2 = 0;
                    do BadDogs.push(Dog.new(0, false));
                }
                if((~st3) & (counter1 = 2000)) {
                    let st3 = true;
                    do BadDogs.push(Dog.new(1, false));
                    let counter3 = 0;
                }
                if(st3 & (counter3 = 200)) {
                    let counter3 = 0;
                    do BadDogs.push(Dog.new(1, false));
                }
            }
             
            /** Find right most dog */
            let targetDogIdx = getTargetDog();   
            let targetDog = Dogs.getElement(targetDogIdx);

            /** Find left most baddog */
            let targetBadDogIdx = getTargetBadDog(); 
            let targetBadDog = BadDogs.getElement(targetBadDogIdx);

 
            /** Dog Action */
            let it = Dogs.getFront(); 
            while(~(it = null)) {
                let cur = it.getData();
                let damage = cur.act();
                if(damage > 0) {
                    if(targetBadDog = null) {
                        if(BadDogCastle.damage(damage)) {
                            do Screen.clearScreen();
                            do Display.win();
                            do Sys.halt();    
                        }
                    } 
                    else {
                        if(targetBadDog.TakeAnyDamage(damage)) {
                            do BadDogs.pop(targetBadDogIdx);  
                            let targetBadDogIdx = getTargetBadDog();   
                            let targetBadDog = BadDogs.getElement(targetBadDogIdx);
                        }
                    }
                }
                let it = it.getNext();
            }
            let it = BadDogs.getFront(); 
            while(~(it = null)) {
                let cur = it.getData();
                let damage = cur.act(); 
                if(damage > 0) {
                    if(targetDog = null) { 
                        if(DogCastle.damage(damage)) {
                            do Screen.clearScreen();
                            do Display.gameOver();
                            do Sys.halt();    
                        }
                    } 
                    else {
                        if(targetDog.TakeAnyDamage(damage)) {
                            do Dogs.pop(targetDogIdx); 
                            let targetDogIdx = getTargetDog();   
                            let targetDog = Dogs.getElement(targetDogIdx);
                        } 
                    }
                }
                let it = it.getNext();
            }

            /** Add money */
            do money.add();
            
            /** If clicked */
            let opt = ui.getopt();
            if((~opt) & (Dogs.size() < 5)) { 
                if(opt = 0) {
                    if(money.sub(10)) {
                        do Dogs.push(Dog.new(0, true)); 
                    }
                }
                else {
                    if(money.sub(30)) {
                        do Dogs.push(Dog.new(1, true));
                    }
                }
            }

            //** Start rendering */
            do Screen.clearScreen();

            /** Draw background */
            do Display.goodCastle();
            do Display.badCastle();



            /** Draw Dogs */
            let it = Dogs.getFront(); 
            while(~(it = null)) {
                let cur = it.getData();
                do cur.show();
                let it = it.getNext();
            }
            let it = BadDogs.getFront(); 
            while(~(it = null)) {
                let cur = it.getData();
                do cur.show();
                let it = it.getNext();
            }

            /** Draw UI */
            do ui.display();

            /** Draw money */
            do money.draw();

            /** Draw blood */
            do DogCastle.draw();
            do BadDogCastle.draw();
        } 
        return;
    }

    method void dispose() {
        do DogCastle.dispose();
        do BadDogCastle.dispose();
        do Dogs.dispose();
        do BadDogs.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
